// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	context "context"
	entity "order-pick-up-point/internal/models/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PvzService is an autogenerated mock type for the PvzService type
type PvzService struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: ctx, pvzID, productType
func (_m *PvzService) AddProduct(ctx context.Context, pvzID string, productType string) (string, error) {
	ret := _m.Called(ctx, pvzID, productType)

	if len(ret) == 0 {
		panic("no return value specified for AddProduct")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, pvzID, productType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, pvzID, productType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, pvzID, productType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseReception provides a mock function with given fields: ctx, pvzID
func (_m *PvzService) CloseReception(ctx context.Context, pvzID string) (string, error) {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for CloseReception")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, pvzID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, pvzID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePvz provides a mock function with given fields: ctx, city
func (_m *PvzService) CreatePvz(ctx context.Context, city string) (string, error) {
	ret := _m.Called(ctx, city)

	if len(ret) == 0 {
		panic("no return value specified for CreatePvz")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, city)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, city)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReception provides a mock function with given fields: ctx, pvzID, dateTime
func (_m *PvzService) CreateReception(ctx context.Context, pvzID string, dateTime time.Time) (string, error) {
	ret := _m.Called(ctx, pvzID, dateTime)

	if len(ret) == 0 {
		panic("no return value specified for CreateReception")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (string, error)); ok {
		return rf(ctx, pvzID, dateTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) string); ok {
		r0 = rf(ctx, pvzID, dateTime)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, pvzID, dateTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLastProduct provides a mock function with given fields: ctx, pvzID
func (_m *PvzService) DeleteLastProduct(ctx context.Context, pvzID string) error {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLastProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, pvzID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPvzsInfo provides a mock function with given fields: ctx, page, limit, startDate, endDate
func (_m *PvzService) GetPvzsInfo(ctx context.Context, page int, limit int, startDate *time.Time, endDate *time.Time) ([]entity.PvzInfo, error) {
	ret := _m.Called(ctx, page, limit, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetPvzsInfo")
	}

	var r0 []entity.PvzInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *time.Time, *time.Time) ([]entity.PvzInfo, error)); ok {
		return rf(ctx, page, limit, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *time.Time, *time.Time) []entity.PvzInfo); ok {
		r0 = rf(ctx, page, limit, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.PvzInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *time.Time, *time.Time) error); ok {
		r1 = rf(ctx, page, limit, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPvzService creates a new instance of PvzService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPvzService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PvzService {
	mock := &PvzService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
