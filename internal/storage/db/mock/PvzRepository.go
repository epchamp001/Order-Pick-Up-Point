// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	context "context"

	entity "order-pick-up-point/internal/models/entity"

	mock "github.com/stretchr/testify/mock"
)

// PvzRepository is an autogenerated mock type for the PvzRepository type
type PvzRepository struct {
	mock.Mock
}

// CreatePvz provides a mock function with given fields: ctx, pvz
func (_m *PvzRepository) CreatePvz(ctx context.Context, pvz entity.Pvz) (string, error) {
	ret := _m.Called(ctx, pvz)

	if len(ret) == 0 {
		panic("no return value specified for CreatePvz")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Pvz) (string, error)); ok {
		return rf(ctx, pvz)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Pvz) string); ok {
		r0 = rf(ctx, pvz)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Pvz) error); ok {
		r1 = rf(ctx, pvz)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListOfPvzs provides a mock function with given fields: ctx
func (_m *PvzRepository) GetListOfPvzs(ctx context.Context) ([]entity.Pvz, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetListOfPvzs")
	}

	var r0 []entity.Pvz
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Pvz, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Pvz); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Pvz)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPvzs provides a mock function with given fields: ctx, page, limit
func (_m *PvzRepository) GetPvzs(ctx context.Context, page int, limit int) ([]entity.Pvz, error) {
	ret := _m.Called(ctx, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPvzs")
	}

	var r0 []entity.Pvz
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]entity.Pvz, error)); ok {
		return rf(ctx, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []entity.Pvz); ok {
		r0 = rf(ctx, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Pvz)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPvzRepository creates a new instance of PvzRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPvzRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PvzRepository {
	mock := &PvzRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
