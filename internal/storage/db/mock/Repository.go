// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	context "context"

	entity "order-pick-up-point/internal/models/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, product
func (_m *Repository) CreateProduct(ctx context.Context, product entity.Product) (string, error) {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Product) (string, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Product) string); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePvz provides a mock function with given fields: ctx, pvz
func (_m *Repository) CreatePvz(ctx context.Context, pvz entity.Pvz) (string, error) {
	ret := _m.Called(ctx, pvz)

	if len(ret) == 0 {
		panic("no return value specified for CreatePvz")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Pvz) (string, error)); ok {
		return rf(ctx, pvz)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Pvz) string); ok {
		r0 = rf(ctx, pvz)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Pvz) error); ok {
		r1 = rf(ctx, pvz)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReception provides a mock function with given fields: ctx, reception
func (_m *Repository) CreateReception(ctx context.Context, reception entity.Reception) (string, error) {
	ret := _m.Called(ctx, reception)

	if len(ret) == 0 {
		panic("no return value specified for CreateReception")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Reception) (string, error)); ok {
		return rf(ctx, reception)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Reception) string); ok {
		r0 = rf(ctx, reception)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Reception) error); ok {
		r1 = rf(ctx, reception)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *Repository) CreateUser(ctx context.Context, user entity.User) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: ctx, productID
func (_m *Repository) DeleteProduct(ctx context.Context, productID string) error {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *Repository) FindByEmail(ctx context.Context, email string) (*entity.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLastProductInReception provides a mock function with given fields: ctx, pvzID
func (_m *Repository) FindLastProductInReception(ctx context.Context, pvzID string) (*entity.Product, error) {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for FindLastProductInReception")
	}

	var r0 *entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Product, error)); ok {
		return rf(ctx, pvzID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Product); ok {
		r0 = rf(ctx, pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOpenReceptionByPvzID provides a mock function with given fields: ctx, pvzID
func (_m *Repository) FindOpenReceptionByPvzID(ctx context.Context, pvzID string) (*entity.Reception, error) {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for FindOpenReceptionByPvzID")
	}

	var r0 *entity.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Reception, error)); ok {
		return rf(ctx, pvzID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Reception); ok {
		r0 = rf(ctx, pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListOfPvzs provides a mock function with given fields: ctx
func (_m *Repository) GetListOfPvzs(ctx context.Context) ([]entity.Pvz, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetListOfPvzs")
	}

	var r0 []entity.Pvz
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Pvz, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Pvz); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Pvz)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsByReceptionID provides a mock function with given fields: ctx, receptionID
func (_m *Repository) GetProductsByReceptionID(ctx context.Context, receptionID string) ([]entity.Product, error) {
	ret := _m.Called(ctx, receptionID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsByReceptionID")
	}

	var r0 []entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Product, error)); ok {
		return rf(ctx, receptionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Product); ok {
		r0 = rf(ctx, receptionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, receptionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPvzs provides a mock function with given fields: ctx, page, limit
func (_m *Repository) GetPvzs(ctx context.Context, page int, limit int) ([]entity.Pvz, error) {
	ret := _m.Called(ctx, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPvzs")
	}

	var r0 []entity.Pvz
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]entity.Pvz, error)); ok {
		return rf(ctx, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []entity.Pvz); ok {
		r0 = rf(ctx, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Pvz)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReceptionsByPvzIDFiltered provides a mock function with given fields: ctx, pvzID, startDate, endDate
func (_m *Repository) GetReceptionsByPvzIDFiltered(ctx context.Context, pvzID string, startDate *time.Time, endDate *time.Time) ([]entity.Reception, error) {
	ret := _m.Called(ctx, pvzID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetReceptionsByPvzIDFiltered")
	}

	var r0 []entity.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *time.Time, *time.Time) ([]entity.Reception, error)); ok {
		return rf(ctx, pvzID, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *time.Time, *time.Time) []entity.Reception); ok {
		r0 = rf(ctx, pvzID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *time.Time, *time.Time) error); ok {
		r1 = rf(ctx, pvzID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReceptionStatus provides a mock function with given fields: ctx, receptionID, status
func (_m *Repository) UpdateReceptionStatus(ctx context.Context, receptionID string, status string) error {
	ret := _m.Called(ctx, receptionID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReceptionStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, receptionID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
