// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Egor Ponyaev",
            "url": "https://github.com/epchamp001",
            "email": "epchamp001@gmail.com"
        },
        "license": {
            "name": "MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/dummyLogin": {
            "post": {
                "description": "Get a JWT token by passing a desired user role (client, employee, moderator) through dummy login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Dummy login for testing",
                "parameters": [
                    {
                        "description": "Dummy login request with role",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DummyLoginPostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token",
                        "schema": {
                            "$ref": "#/definitions/dto.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: invalid role or error during dummy login",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login a user using email and password. Returns a JWT token if credentials are valid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User login data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginPostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token",
                        "schema": {
                            "$ref": "#/definitions/dto.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            }
        },
        "/products": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new product to the last open reception for a given PVZ. Only employees can add products.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pvz"
                ],
                "summary": "Add a product to the current reception",
                "parameters": [
                    {
                        "description": "Product addition data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ProductsPostRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product added, returning its ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ProductsPostResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: missing token or insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            }
        },
        "/pvz": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a paginated list of PVZ with reception and product details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pvz"
                ],
                "summary": "Get PVZ information",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"2025-04-09T00:00:00Z\"",
                        "description": "Filter: start date in RFC3339 format",
                        "name": "startDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2025-04-09T23:59:59Z\"",
                        "description": "Filter: end date in RFC3339 format",
                        "name": "endDate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of PVZ information",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PvzGet200ResponseInner"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: missing token or insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new PVZ. Only users with a moderator role can create a PVZ.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pvz"
                ],
                "summary": "Create a new PVZ",
                "parameters": [
                    {
                        "description": "PVZ creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePvzPostRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Newly created PVZ information",
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePvzResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: missing token or insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            }
        },
        "/pvz/{pvzId}/close_last_reception": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Close the last open reception for a specified PVZ, finalizing the reception process. Only employees can close receptions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pvz"
                ],
                "summary": "Close the current reception",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"pvz123\"",
                        "description": "PVZ ID",
                        "name": "pvzId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Closed reception details with its ID",
                        "schema": {
                            "$ref": "#/definitions/dto.CloseReceptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request: missing pvzId",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: missing token or insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            }
        },
        "/pvz/{pvzId}/delete_last_product": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete the last product that was added to an open reception for a given PVZ (LIFO order). Only employees can delete products.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pvz"
                ],
                "summary": "Delete the last added product from the current reception",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"pvz123\"",
                        "description": "PVZ ID",
                        "name": "pvzId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deletion success message",
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteProductResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request: missing pvzId",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: missing token or insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            }
        },
        "/receptions": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Initiate a new reception for a specified PVZ. Only employees can create a reception.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pvz"
                ],
                "summary": "Create a new reception for goods",
                "parameters": [
                    {
                        "description": "Reception creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateReceptionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Reception created, returning its ID",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateReceptionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: missing token or insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user with email, password and role (client, employee, moderator).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterPostRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registration success response with user ID",
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CloseReceptionResponse": {
            "description": "Response returned after successfully closing a reception.",
            "type": "object",
            "properties": {
                "receptionId": {
                    "type": "string",
                    "example": "recv456"
                }
            }
        },
        "dto.CreatePvzPostRequest": {
            "description": "Request payload for creating a new PVZ.",
            "type": "object",
            "required": [
                "city"
            ],
            "properties": {
                "city": {
                    "type": "string",
                    "example": "Moscow"
                }
            }
        },
        "dto.CreatePvzResponse": {
            "description": "Response returned after successfully creating a PVZ.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "pvz789"
                }
            }
        },
        "dto.CreateReceptionRequest": {
            "description": "Request payload for creating a new reception.",
            "type": "object",
            "required": [
                "pvzId"
            ],
            "properties": {
                "dateTime": {
                    "type": "string",
                    "example": "2025-04-09T15:04:05Z"
                },
                "pvzId": {
                    "type": "string",
                    "example": "pvz789"
                }
            }
        },
        "dto.CreateReceptionResponse": {
            "description": "Response returned after a reception is created.",
            "type": "object",
            "properties": {
                "receptionId": {
                    "type": "string",
                    "example": "recv456"
                }
            }
        },
        "dto.DeleteProductResponse": {
            "description": "Response returned after successful deletion of the product.",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "product deleted successfully"
                }
            }
        },
        "dto.DummyLoginPostRequest": {
            "description": "Request payload for dummy login. Provide a desired user role (\"client\", \"employee\", \"moderator\") to obtain a JWT token.",
            "type": "object",
            "properties": {
                "role": {
                    "type": "string",
                    "example": "employee"
                }
            }
        },
        "dto.Error": {
            "description": "Standard error response containing an error message.",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "invalid request body"
                }
            }
        },
        "dto.LoginPostRequest": {
            "description": "Request payload for login using email and password.",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "strongpassword123"
                }
            }
        },
        "dto.ProductDTO": {
            "description": "Represents a product with its details.",
            "type": "object",
            "properties": {
                "dateTime": {
                    "type": "string",
                    "example": "2025-04-09T15:04:05Z"
                },
                "id": {
                    "type": "string",
                    "example": "prod123"
                },
                "receptionId": {
                    "type": "string",
                    "example": "recv456"
                },
                "type": {
                    "type": "string",
                    "example": "electronics"
                }
            }
        },
        "dto.ProductsPostRequest": {
            "description": "Request payload for adding a product to a reception.",
            "type": "object",
            "required": [
                "pvzId",
                "type"
            ],
            "properties": {
                "pvzId": {
                    "type": "string",
                    "example": "pvz789"
                },
                "type": {
                    "type": "string",
                    "example": "clothes"
                }
            }
        },
        "dto.ProductsPostResponse": {
            "description": "Response returned after successfully adding a product.",
            "type": "object",
            "properties": {
                "productId": {
                    "type": "string",
                    "example": "prod123"
                }
            }
        },
        "dto.PvzDTO": {
            "description": "Represents a PVZ (pickup point) with its information.",
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "example": "Moscow"
                },
                "id": {
                    "type": "string",
                    "example": "pvz789"
                },
                "registrationDate": {
                    "type": "string",
                    "example": "2025-04-09T12:00:00Z"
                }
            }
        },
        "dto.PvzGet200ResponseInner": {
            "description": "Response model for retrieving PVZ information, including receptions and products.",
            "type": "object",
            "properties": {
                "pvz": {
                    "$ref": "#/definitions/dto.PvzDTO"
                },
                "receptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PvzGet200ResponseInnerReceptionsInner"
                    }
                }
            }
        },
        "dto.PvzGet200ResponseInnerReceptionsInner": {
            "description": "Represents a reception within a PVZ, including its associated products.",
            "type": "object",
            "properties": {
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ProductDTO"
                    }
                },
                "reception": {
                    "$ref": "#/definitions/dto.ReceptionDTO"
                }
            }
        },
        "dto.ReceptionDTO": {
            "description": "Represents a reception record for goods.",
            "type": "object",
            "properties": {
                "dateTime": {
                    "type": "string",
                    "example": "2025-04-09T15:04:05Z"
                },
                "id": {
                    "type": "string",
                    "example": "recv456"
                },
                "pvzId": {
                    "type": "string",
                    "example": "pvz789"
                },
                "status": {
                    "type": "string",
                    "example": "in_progress"
                }
            }
        },
        "dto.RegisterPostRequest": {
            "description": "Request payload for user registration.",
            "type": "object",
            "required": [
                "email",
                "password",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "strongpassword123"
                },
                "role": {
                    "type": "string",
                    "example": "moderator"
                }
            }
        },
        "dto.RegisterResponse": {
            "description": "Response returned after successful user registration.",
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string",
                    "example": "user123"
                }
            }
        },
        "dto.TokenResponse": {
            "description": "Response containing a JWT token.",
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWT token. Obtain the token via /login (using email and password) or via /dummy Login (passing desired role).",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Order Pick-Up Point",
	Description:      "Service for processing orders at Pick-Up Point. Allow registration and login by email/password as well as dummy login using user roles (client, employee, moderator).",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
